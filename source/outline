#include <stdio.h>
#include "lpc24xx.h"
#include "config.h"
#include "ConfigStick.h"
#include "portlcd.h"
#include "fio.h"
#include "tables.h"
#include "malloc.h"

#define LED1BIT 7
#define LED2BIT 6
#define LED3BIT 5
#define LED4BIT 4

#define EMPTY 12345
#define FULL 54321
#define BUFFERSIZE 1024
#define FREQ_ABTAST 44118                //Frequenz, mit der die Ausgabe erfolgt 44.117,64706 hz
#define MACH_REGISTER_COUNT (SYS_CLK + FREQ_ABTAST / 2) / FREQ_ABTAST -1 

#define SYS_CLK 48000000
#define N_STUETZ 256                     //Anzahl der Stuetzstellen
#define N_PRINTS_PER_SECOND 2
#define PRINT_COUNTER (FREQ_ABTAST / N_PRINTS_PER_SECOND)

#define FREQUENZ_S0 400
#define FREQUENZ_S1 5000
#define B_FIXPOINT_1V 620
#define B_FIXPOINT_05V 310
#define AMPL     (1<<15)                 //Amplitude der Stuetzstellenwerte
#define N_NACHKOMMA 16                   //Anzahl der binaeren Nachkommastellen bei der Zeitberechnung

#define S0_PRESSED (!((GPIO1_IOPIN >> 8)  & 1))
#define S1_PRESSED (!((GPIO1_IOPIN >> 9)  & 1))
#define S2_PRESSED (!((GPIO1_IOPIN >> 10) & 1))
#define S3_PRESSED (!((GPIO1_IOPIN >> 11) & 1))
#define S4_PRESSED (!((GPIO1_IOPIN >> 12) & 1))
#define S5_PRESSED (!((GPIO1_IOPIN >> 13) & 1))
#define S6_PRESSED (!((GPIO1_IOPIN >> 14) & 1))
#define S7_PRESSED (!((GPIO1_IOPIN >> 15) & 1))




void initTimer();

struct buffer{
    volatile int state;
    volatile int *data;         
    volatile int buffersize;      
};
volatile struct buffer *buffer1;
volatile struct buffer *buffer2;
volatile struct buffer *actualbuffer;
volatile struct buffer *isrbuffer;
char stringBufferForLcdPrint[33]; //16 stellen pro LCD-Zeile + term. null

int *tabelle[N_STUETZ+1];
//var theFunction = selectFunction(); //Funktion festlegen (Sinus oder Dreieck)

int count = 0;
int msRuntime = 0;
int running = 0;
int timerRunning = 0;
int printCount = 0;
int isrBufferIdx = 0;
int *table_wave =  (int*)table_sin;
int freq_signal = 440;
int a_fixpoint = 30504029;
int b_fixpoint = 621;

void __attribute__ ((interrupt("IRQ"))) isr_ms(void){
 
	TIMER3_IR = 0x01;   // INT-Acknowledge resp. switch off MR0-IRQ ( MatchRegister0 InterruptReQuest ) -> UM Chapter 6-6.1, Table 547  
	msRuntime++;
	VICVectAddr = 0;       // mark end of ISR  resp. trigger update of VIC priority logic -> UM Chapter 3-3.11, Table 113 
}


void __attribute__ ((interrupt("IRQ"))) isr_timer(void){

    TIMER2_IR = 0x01;   // INT-Acknowledge resp. switch off MR0-IRQ ( MatchRegister0 InterruptReQuest ) -> UM Chapter 6-6.1, Table 547  

	if(isrbuffer->state == EMPTY){
 	   // GPIO1_IOPIN = ( GPIO1_IOPIN | (1<<LED2BIT) ); //UNDERFLOW_LED2 ON
    }else{   
 	    //GPIO1_IOPIN = ( GPIO1_IOPIN & ~(1<<LED2BIT) ); //UNDERFLOW_LED2 OFF

 	    DACR = (isrbuffer->data[isrBufferIdx] << 6); // Wert auf den DAC schreiben
		count++;
 	    isrBufferIdx++;
 		printCount++;

		if(isrBufferIdx == BUFFERSIZE){ 
			isrbuffer->state = EMPTY;	//den letzten Wert ausgegeben
			
			if(isrbuffer == buffer1){	// Wenn Buffergröße erreicht ist, dann aktuellen Buffer aendern
				isrbuffer = buffer2;
			}else{
				isrbuffer = buffer1;
			}
 		    isrBufferIdx = 0; // wieder am Anfang des neuen Buffers anfangen zu lesen
		}	
    }
    VICVectAddr = 0;       // mark end of ISR  resp. trigger update of VIC priority logic -> UM Chapter 3-3.11, Table 113 
}

int main (void)
{
    BaseStickConfig(); // initialize the LPC-Stick, enable UART0, UART2 and CAN


	//REFERENZ Schwingung 5000Hz
	PCONP |= (1<<6);                          // Enable PWM1
    PCLKSEL0 |= (1<<12);                      // Clock == CCLK (48 MHz)
    PINSEL4 |= (1<<0) | (1<<2) | (1<<4);      // P2.0 istPWM1.1, P2.1 istPWM1.2, P2.2 istPWM1.3
    PWM1_PR = 48000000/10000-1;               // Prescaler, PWM-Takt= 1 Hz
    PWM1_MCR = (1<<0) | (1<<1);               // Interrupt on PWMMR0, Reset on PWMMR0
    PWM1_PCR = //(1<<2) | (1<<3) |            // PWM1.2 double edge, PWM1.3 double edge,
               (1<<9);// | (1<<10) | (1<<11); // PWM1.1 PWM1.2 PWM1.3 enabled
    PWM1_MR0 = 2;                             // PWM-Period
    PWM1_MR1 = 1;                             // PWM-Match 1
    PWM1_LER = (1<<0) | (1<<1) |              // Latch Enable
               (1<<2) | (1<<3);
    PWM1_TCR = (1<<0) | (1<<3);               // Counter Enable, PWM Enable
	//REFERENZ Schwingung 5000Hz


    PCLKSEL0 |= 0x01<<22; // clock für DAC setzten
    PINSEL1  |= 0x10<<20; // AOUT Pin wählen ( Was bringt : PINMODE1  = 0x01; )
	
	// Buffer für Wechselseitiges Lesen/Schreiben
	buffer1 = malloc(sizeof(struct buffer));
    buffer1->state = EMPTY;
    buffer1->data = malloc(sizeof(*buffer1->data) * BUFFERSIZE);
    buffer1->buffersize = BUFFERSIZE;

    buffer2 = malloc(sizeof(struct buffer));
    buffer2->state = EMPTY;
    buffer2->data = malloc(sizeof(*buffer2->data) * BUFFERSIZE);
    buffer2->buffersize = BUFFERSIZE;

	actualbuffer = buffer1;
	isrbuffer = buffer1;
	LCD_cur_off(); //cursor deaktivieren

	int offset = ((freq_signal * ((N_STUETZ << N_NACHKOMMA) / FREQ_ABTAST)  )); // 440 * 255*2^16 / 44117
	int tableIdx = 0;
	int buffIdx = 0;

	while(1){
		if (S6_PRESSED){ //if S6 start Progrogramm
			running = 1;
		}

	    while(running){
	
			if (S7_PRESSED){ //if S7 stopp Programm
				running = 0;
			}	
			else if(S2_PRESSED){ //if S2  Sinuskurve
				table_wave = (int*)table_sin;
			}	
			else if(S3_PRESSED){ //if S3 Sägezahn
				 table_wave = (int*)table_triangle;
			}
 			else if(S0_PRESSED){ //if S0 440 Hz
				freq_signal = FREQUENZ_S0;
 				offset = ((N_STUETZ * (((uint64_t)freq_signal<< N_NACHKOMMA) / FREQ_ABTAST)) );
			}	
			else if(S1_PRESSED){ //if S1 5000 Hz
				freq_signal = FREQUENZ_S1;
 				offset = ( N_STUETZ * ((uint64_t)freq_signal<< N_NACHKOMMA) / FREQ_ABTAST );
			}
 			else if(S4_PRESSED){ //if S4 1 V Amplitude
				b_fixpoint = B_FIXPOINT_1V;
 				offset = ((N_STUETZ * ((freq_signal<< N_NACHKOMMA) / FREQ_ABTAST)) );
			}	
			else if(S5_PRESSED){ //if S5 0,5 V Amplitude
				b_fixpoint = B_FIXPOINT_05V;
 				offset = ((N_STUETZ * ((freq_signal<< N_NACHKOMMA) / FREQ_ABTAST)) );
			}

			//WAIT_LED ON
		    GPIO1_IOPIN = ( GPIO1_IOPIN | (1<<LED1BIT) ); //aktiviere LED1 (IDLE)	
	
	        while(actualbuffer->state != EMPTY){   //solange puffer noch voll
	 			
				if(printCount >= PRINT_COUNTER){ // 2 mal in der Sekunde wird das LCD Display geschrieben
					
	 				sniprintf(stringBufferForLcdPrint, sizeof(stringBufferForLcdPrint), "%i %17i", msRuntime, count);	
	 				
		            LCD_gotoxy(0,1);
					LCD_puts (stringBufferForLcdPrint);
	 			    printCount = 0;
	 				
				}
	        }
	        
			//WAIT_LED OFF
	 	    GPIO1_IOPIN = ( GPIO1_IOPIN & ~(1<<LED1BIT) ); //deaktiviere LED1 (IDLE)
			
	        //FILL actualbuffer
			while(buffIdx < BUFFERSIZE){
				
				if( tableIdx >= (N_STUETZ << N_NACHKOMMA) ){
					tableIdx = tableIdx - (N_STUETZ << N_NACHKOMMA) ;
				}
	
				//							       A      +       B     *                 Nstuetz         <RUNDEN>
				actualbuffer->data[buffIdx] =   ( a_fixpoint + (b_fixpoint *   table_wave[ (tableIdx + ( 1<<(N_NACHKOMMA-1) ) ) >>N_NACHKOMMA]))>>N_NACHKOMMA ;
				tableIdx += offset;		
				buffIdx++;
			}
	
			buffIdx = 0;
	       
	        actualbuffer->state = FULL;
			if(timerRunning == 0){
				initTimer();	
			}
	 	    	
	        // Buffer Wechseln
	        if(actualbuffer == buffer1){
	            actualbuffer = buffer2;
	 		    GPIO1_IOPIN = ((GPIO1_IOPIN | (1<<LED4BIT)) & ~(1<<LED3BIT)); //Activate LED4 & deactivate LED3		
	        }else{
				actualbuffer = buffer1;
	 		    GPIO1_IOPIN = ((GPIO1_IOPIN | (1<<LED3BIT)) & ~(1<<LED4BIT)); //Activate LED3 & deactivate LED4			
	        }  
	    }
	}
	return 0;
}

void initTimer(){
    PCONP    |= (1<<22); // enable timer
	PCLKSEL1 |= (1<<12); // set clock to cclk (48 MHz)
	TIMER2_TCR = 0x02; // reset timer
	TIMER2_MR0 = MACH_REGISTER_COUNT; // set match register 0 -->   44.117,64706 hz
	TIMER2_PR  =  0; // set prescaler
	TIMER2_IR  =  0xff; // reset all interrrupts
	TIMER2_MCR = 3<<0; // interrupt on MR0, reset on MR0, do not stop timer
	TIMER2_TCR = 0x01; // start timer

 	VICIntSelect      &=  ~(1<<26);          // Timer2 assigned to IRQ category and NOT FIQ   -> UM Chapter 7-3.6,  Table 108 (& 117)
	VICVectPriority26  =  1;                    // assign Prio 5 for Timer2                      -> UM Chapter 7-3.10, Table 112 (& 102, 117)
	VICVectAddr26      =  (int)( isr_timer );   // bind "timer isr" to Timer2 IRQ                -> UM Chapter 7-3.11, Table 113 (& 102, 117)
	VICIntEnable       =  (1<<26);           // enable interrupt for Timer2 IRQ               -> UM Chapter 7-3.4,  Table 106 (& 117)	


    PCONP     |= (1<<23); // enable timer
	PCLKSEL1  |= (1<<12); // set clock to cclk (48 MHz)
	TIMER3_TCR =  0x02; // reset timer
	TIMER3_MR0 =  12000; // set match register 0 -->   1000Hz ( warum nicht 48000 ??? )
	TIMER3_PR  =  0; // set prescaler
	TIMER3_IR  =  0xff; // reset all interrrupts
	TIMER3_MCR =  3<<0; // interrupt on MR0, reset on MR0, do not stop timer
	TIMER3_TCR =  0x01; // start timer	

  	VICIntSelect      &=  ~(1<<27);          // Timer3 assigned to IRQ category and NOT FIQ   -> UM Chapter 7-3.6,  Table 108 (& 117)
	VICVectPriority27  =  15;                    // assign Prio 15 for Timer3                      -> UM Chapter 7-3.10, Table 112 (& 102, 117)
	VICVectAddr27      =  (int)( isr_ms );   // bind "timer isr" to Timer3 IRQ                -> UM Chapter 7-3.11, Table 113 (& 102, 117)
	VICIntEnable       =  (1<<27);           // enable interrupt for Timer3 IRQ               -> UM Chapter 7-3.4,  Table 106 (& 117)		

    timerRunning = 1;	
}
/************************************** EOF *********************************/
